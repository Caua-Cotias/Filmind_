generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  medias        Media[]
  contents MediaTorrent[]
  accounts      Account[]
  sessions      Session[]
  @@map("user")
}

model Media {
  id              Int      @id @default(autoincrement())
  userId          String   @unique
  title           String
  tmdbId          Int?
  synopsis        String?
  genres          String?
  ipfsCid         String?
  posterUrl       String?
  wallpaperUrl    String?
  jellyfinUrl     String?
  torrentMagnet   String?
  torrentInfoHash String?
  status          String    @default("pending")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum MediaType {
MOVIE
SERIES
DOCUMENTARY
}


enum MediaStatus {
PENDING
READY
ERROR
}

model MediaTorrent {
id String @id @default(uuid())
title String
description String?
ownerId String
owner User @relation(fields: [ownerId], references: [id])
type MediaType @default(MOVIE)
status MediaStatus @default(PENDING)
magnet String?
cid String?
ipfsCid   String?
manifestUrl String?
thumbnails String[] @default([])
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

